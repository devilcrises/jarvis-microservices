apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  minReadySeconds: {{ .Values.deployment.minReadySeconds }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }}
  template:
    metadata:
      annotations:
        eks.amazonaws.com/compute-type: fargate
      labels:
        app: {{ .Values.deployment.name }}
    spec:
      serviceAccountName: {{ .Values.deployment.serviceAccountName }}
      containers:
        - name: {{ .Values.deployment.name }}
          image: {{ .Values.deployment.image.repo }}:{{ .Values.deployment.image.tag }}
          resources:
            limits:
              memory: {{ .Values.deployment.limits.memory}}
              cpu: {{ .Values.deployment.limits.cpu}}
            requests:
              cpu: {{ .Values.deployment.requests.cpu}}
              memory: {{ .Values.deployment.requests.memory}}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.deployment.port }}
            protocol: TCP
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.healthPath }}
              port: {{ .Values.deployment.port }}
            initialDelaySeconds: {{ .Values.deployment.initialDelay }}
            periodSeconds: {{ .Values.deployment.liveness.period }}
            successThreshold: {{ .Values.deployment.liveness.successThreshold }}
            failureThreshold: {{ .Values.deployment.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.deployment.liveness.timeout }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.healthPath }}
              port: {{ .Values.deployment.port }}
            initialDelaySeconds: {{ .Values.deployment.initialDelay }}
            periodSeconds: {{ .Values.deployment.readiness.period }}
            timeoutSeconds: {{ .Values.deployment.readiness.timeout }}
            successThreshold: {{ .Values.deployment.readiness.successThreshold }}
            failureThreshold: {{ .Values.deployment.readiness.failureThreshold }}
          envFrom:
            - configMapRef:
                name: {{ .Values.configMap.name }}
            - secretRef:
                name: {{ .Values.secrets.name }}
            - secretRef:
                name: newrelic-api-key
          volumeMounts:
            - name: applog
              mountPath: /workspace/logs/
# Fluentd container
        - name: {{ .Values.fluentd.name}}
          image: 579480199555.dkr.ecr.ap-south-1.amazonaws.com/fluentd:latest
          imagePullPolicy: IfNotPresent
          env:
           - name: FLUENT_UID
             value: root
           - name: FLUENTD_ARGS
             value: -c /td-agent/etc/td-agent.conf
           - name: log_path
             valueFrom:
               configMapKeyRef:
                 name: {{ .Values.configMap.name }}
                 key: log_path
           - name: service
             valueFrom:
               configMapKeyRef:
                 name: {{ .Values.configMap.name }}
                 key: service
          envFrom:
            - secretRef:
                name: newrelic-api-key
          volumeMounts:
            - name: applog
              mountPath: {{ .Values.fluentd.mountPath}}
            - name: tdagentconf
              mountPath: /td-agent/etc/
# NewRelic container
        - name: {{ .Values.newrelic.name }}
          env:
          - name: NRIA_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: api_key
                name: newrelic-api-key
          - name: NRIA_VERBOSE
            value: "1"
          - name: DISABLE_KUBE_STATE_METRICS
            value: "true"
          - name: CLUSTER_NAME
            value: {{ .Values.newrelic.cluster_name}}
          - name: COMPUTE_TYPE
            value: serverless
          - name: NRK8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: NRIA_DISPLAY_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: NRIA_CUSTOM_ATTRIBUTES
            value: '{"clusterName":"$(CLUSTER_NAME)", "computeType":"$(COMPUTE_TYPE)", "fargateProfile":"threedots_profile-0"}'
          - name: NRIA_PASSTHROUGH_ENVIRONMENT
            value: KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL,KUBE_STATE_METRICS_POD_LABEL,TIMEOUT,ETCD_TLS_SECRET_NAME,ETCD_TLS_SECRET_NAMESPACE,API_SERVER_SECURE_PORT,KUBE_STATE_METRICS_SCHEME,KUBE_STATE_METRICS_PORT,SCHEDULER_ENDPOINT_URL,ETCD_ENDPOINT_URL,CONTROLLER_MANAGER_ENDPOINT_URL,API_SERVER_ENDPOINT_URL,DISABLE_KUBE_STATE_METRICS,DISCOVERY_CACHE_TTL
          image: newrelic/infrastructure-k8s:2.4.0-unprivileged
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: {{ .Values.newrelic.limits.memory}}
              cpu: {{ .Values.newrelic.limits.cpu}}
            requests:
              cpu: {{ .Values.newrelic.requests.cpu}}
              memory: {{ .Values.newrelic.requests.memory}}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/db/newrelic-infra/data
            name: tmpfs-data
          - mountPath: /var/db/newrelic-infra/user_data
            name: tmpfs-user-data
          - mountPath: /tmp
            name: tmpfs-tmp
          - mountPath: /var/cache/nr-kubernetes
            name: tmpfs-cache
      volumes:
      - name: tmpfs-data
        emptyDir: {}
      - name: tmpfs-user-data
        emptyDir: {}
      - name: tmpfs-tmp
        emptyDir: {}
      - name: tmpfs-cache
        emptyDir: {}
      - name: applog
        emptyDir: {}
      - name: tdagentconf
        configMap:
          name: jarvis-tdagentconf-config
